name: tofu-checks

on:
  workflow_call:
    inputs:
      tf_var_file:
        required: true
        type: string
      test_directory:
        required: false
        type: string
        default: "tests"

defaults:
  run:
    shell: bash

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
            ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure OpenTofu
        uses: opentofu/setup-opentofu@12f4debbf681675350b6cd1f0ff8ecfbda62027b # v1.0.4

      - name: Print Tofu Version
        run: tofu --version

      - name: Tofu Format Check
        run: tofu fmt --check
        working-directory: ${{ github.workspace }}/tofu

  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
            ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure OpenTofu
        uses: opentofu/setup-opentofu@12f4debbf681675350b6cd1f0ff8ecfbda62027b # v1.0.4

      - name: Print Tofu Version
        run: tofu --version
        working-directory: ${{ github.workspace }}/tofu

      - name: Tofu Init
        run: tofu init --backend=false
        working-directory: ${{ github.workspace }}/tofu

      - name: Tofu Validate
        run: tofu validate
        working-directory: ${{ github.workspace }}/tofu

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
            ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure OpenTofu
        uses: opentofu/setup-opentofu@12f4debbf681675350b6cd1f0ff8ecfbda62027b # v1.0.4

      - name: Print Tofu Version
        run: tofu --version

      - name: Get OIDC Token File
        run: |
          curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r .value > /tmp/web-identity-token

      - name: Tofu Init
        run: tofu init -backend=false
        working-directory: ${{ github.workspace }}/tofu

      - name: Tofu Test
        id: test
        run: tofu test -var-file="${{ inputs.tf_var_file }}" -test-directory="${{ inputs.test_directory }}"
        working-directory: ${{ github.workspace }}/tofu

  post-comment:
    runs-on: ubuntu-latest
    needs: [fmt, validate, test]
    steps:
      - name: Post Comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fmtResult = `**Tofu Format Check:** ${{ needs.fmt.result }}`;
            const validateResult = `**Tofu Validate:** ${{ needs.validate.result }}`;
            const testResult = `**Tofu Test:** ${{ needs.test.result }}`;
            const commentBody = `## Tofu Checks Result\n\n${fmtResult}\n${validateResult}\n${testResult}`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('## Tofu Checks Result'));

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
